plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.dagger.hilt.android'
    id 'kotlin-kapt'
    id 'org.jlleitschuh.gradle.ktlint'
    id 'com.google.protobuf' version '0.9.1'
    id 'de.mannodermaus.android-junit5' version '1.9.3.0'
}

def getApkName = { variant, defaultConfig ->
    def name = defaultConfig.applicationId \
                               + "-" + variant.buildType.name \
                               + "-v" + defaultConfig.versionCode \
                               + "-[" + defaultConfig.versionName + "]"

    if (variant.signingConfig == null) {
        name += "-unsigned"
    }
    name += ".apk"
    return name
}


Properties localProps = new Properties()
localProps.load(project.rootProject.file("local.properties").newDataInputStream())

Properties signingProps = null
if (project.rootProject.file("signing.properties").exists()) {
    signingProps = new Properties()
    signingProps.load(project.rootProject.file("signing.properties").newDataInputStream())
}

def STRING = 'String'
def CURRENCY_BEACON_API_KEY = 'CURRENCY_BEACON_API_KEY'

android {
    namespace 'com.ofilip.exchange_rates'
    compileSdk versions.compileSdk

    defaultConfig {
        applicationId "com.ofilip.exchange_rates"
        minSdk versions.minSdk
        targetSdk versions.targetSdk
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        def currencyBeaconApiKey = localProps.getProperty('currencyBeacon.apiKey')
        if (currencyBeaconApiKey == null || currencyBeaconApiKey.isEmpty()) {
            throw new GradleException("Currency Beacon API key is not set in local.properties, check readme.md (installation section) for more info.")
        } else {
            buildConfigField(STRING, CURRENCY_BEACON_API_KEY, currencyBeaconApiKey)
        }
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == 'release') {
            // For release build type, use default versions name without suffixes
            variant.outputs.each { output ->
                output.versionNameOverride = android.defaultConfig.versionName
            }
        }
    }

    signingConfigs {
        if (signingProps != null) {
            debug {
                keyAlias signingProps.getProperty('debug.keyAlias')
                keyPassword signingProps.getProperty('debug.keyPassword')
                storeFile file(signingProps.getProperty('debug.storeFile'))
                storePassword signingProps.getProperty('debug.storePassword')
            }

            release {
                keyAlias signingProps.getProperty('release.keyAlias')
                keyPassword signingProps.getProperty('release.keyPassword')
                storeFile file(signingProps.getProperty('release.storeFile'))
                storePassword signingProps.getProperty('release.storePassword')
            }
        }
    }

    buildTypes {
        applicationVariants.all { variant ->
            // Rename generated APK files
            variant.outputs.all {
                outputFileName = getApkName(variant, defaultConfig)
            }
        }

        debug {
            versionNameSuffix '-debug'
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            if (signingConfigs.hasProperty('release')) {
                signingConfig signingConfigs.release
            }
        }

        qa {
            initWith release
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            versionNameSuffix '-qa'
            matchingFallbacks = ['debug']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.4.8'
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    kapt {
        correctErrorTypes true
        javacOptions {
            option("-source", "17")
            option("-target", "17")
        }
    }

    buildFeatures {
        buildConfig = true
    }
}

dependencies {
    implementation libs.coreKtx
    implementation libs.lifecycleRuntimeKtx
    implementation libs.lifecycleViewModelCompose
    implementation libs.activityCompose
    implementation libs.compose
    implementation libs.room
    implementation libs.gson
    implementation libs.hilt
    implementation libs.coroutines
    implementation libs.timber
    implementation libs.retrofit
    implementation libs.datastorePreferences
    implementation libs.datastoreCore
    implementation libs.datastore
    implementation libs.protobuf
    implementation libs.workRuntimeKtx
    implementation libs.swipeRefresh
    implementation libs.systemUiController
    implementation libs.toolbarCompose

    testImplementation testLibs.junit
    testImplementation testLibs.junitJupiter
    testImplementation testLibs.mockito
    testImplementation testLibs.androidxCore
    testImplementation testLibs.work
    testImplementation testLibs.coroutines

    debugImplementation debugLibs.compose

    kapt kaptLibs.roomCompiler
    kapt kaptLibs.hiltDaggerCompiler
    kapt kaptLibs.hiltCompiler
}

protobuf {
    protoc {
        artifact = libs.protobufProtoc
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}
